@page "/listtruncks"
@using TruncksProject.Core.Contracts
@using TruncksProject.Domain.DTOs
@inject IServiceTrunck serviceTrunck


<h1>List of Truncks</h1>


@if (truncks == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>YearFabrication</th>
                <th>YearModel</th>
                <th>ModelTrunck</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in truncks)
            {
                <tr>
                    <td>@item.Id.ToString()</td>
                    <td>@item.YearFabrication</td>
                    <td>@item.YearModel</td>
                    <td>@item.ModelTrunck.ToString()</td>
                    <td>
                    <a href='/trunck/edit/@item.Id.ToString()' class="btn btn-success">Edit</a>                    
                    <button  @onclick="@(()=>Delete(@item.Id))" class="btn btn-danger">Delete</button>
                </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TrunckDTO> truncks;

    protected override async Task OnInitializedAsync()
    {
        truncks = await serviceTrunck.GetAllAsync();
    }

    async Task Delete(Guid id)
    {
        await serviceTrunck.DeleteAsync(id);
        truncks = await serviceTrunck.GetAllAsync();
    }
}
